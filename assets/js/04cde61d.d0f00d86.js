"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[2157],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),y=o,g=u["".concat(p,".").concat(y)]||u[y]||f[y]||a;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},3834:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:7},i="Scrape ArcGIS REST API GeoJSON Data",s={unversionedId:"geospatial-analysis/python-for-gis/scrape_arcgis_rest_api",id:"geospatial-analysis/python-for-gis/scrape_arcgis_rest_api",title:"Scrape ArcGIS REST API GeoJSON Data",description:"",source:"@site/docs/geospatial-analysis/python-for-gis/scrape_arcgis_rest_api.md",sourceDirName:"geospatial-analysis/python-for-gis",slug:"/geospatial-analysis/python-for-gis/scrape_arcgis_rest_api",permalink:"/docs/geospatial-analysis/python-for-gis/scrape_arcgis_rest_api",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Identify flat terrain with above average sun",permalink:"/docs/geospatial-analysis/python-for-gis/identify-flat-terrain-with-above-average-sun"},next:{title:"Uploading Data to PostGIS with Linux Shell",permalink:"/docs/category/uploading-data-to-postgis-with-linux-shell"}},p={},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scrape-arcgis-rest-api-geojson-data"},"Scrape ArcGIS REST API GeoJSON Data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import requests\n\nbase_url = "https://example.com/server/rest/services/ext/"\noutput_folder = "output/"\n\nlist_items = [\n"item_1", "item_2"\n]\n\nfor list_item in list_items:\n    for endpoint in range(0, 100):\n        query_url = f"{base_url}{list_item}/FeatureServer/{endpoint}/query?where=1%3D1&outFields=*&returnGeometry=true&f=geojson"\n\n        try:\n            response = requests.get(query_url)\n            response.raise_for_status()  # Check for HTTP errors\n\n            # Save response content as GeoJSON\n            geojson_filename = f"{output_folder}{list_item}_{endpoint}.geojson"\n            with open(geojson_filename, "wb") as f:\n                f.write(response.content)\n\n            print(f"Saved GeoJSON for endpoint {endpoint} of {list_item} to {geojson_filename}")\n\n        except requests.exceptions.RequestException as e:\n            print(f"Error retrieving data for endpoint {endpoint} of {list_item}: {e}")\n')))}u.isMDXComponent=!0}}]);