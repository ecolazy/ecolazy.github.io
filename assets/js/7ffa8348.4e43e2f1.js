"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[3937],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(r),y=a,m=c["".concat(s,".").concat(y)]||c[y]||g[y]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},5465:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={slug:"python-and-qgis-layer-png-export",title:"python and qgis layer png export",authors:"ecolazy",tags:["hello","docusaurus"]},i="python and qgis layer png export",p={permalink:"/blog/python-and-qgis-layer-png-export",editUrl:"https://github.com/ecolazy/blog/2023-08-17-python-and-qgis-layer-png-export.md",source:"@site/blog/2023-08-17-python-and-qgis-layer-png-export.md",title:"python and qgis layer png export",description:"",date:"2023-08-17T00:00:00.000Z",formattedDate:"August 17, 2023",tags:[{label:"hello",permalink:"/blog/tags/hello"},{label:"docusaurus",permalink:"/blog/tags/docusaurus"}],readingTime:1.075,hasTruncateMarker:!1,authors:[{name:"ecolazy",title:"Maintainer",url:"https://ecolazy.github.io",key:"ecolazy"}],frontMatter:{slug:"python-and-qgis-layer-png-export",title:"python and qgis layer png export",authors:"ecolazy",tags:["hello","docusaurus"]},nextItem:{title:"bristol house price heatmap",permalink:"/blog/bristol-house-price-heatmap"}},s={authorsImageUrls:[void 0]},l=[],u={toc:l};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from qgis.core import QgsProject, QgsMapSettings, QgsMapRendererParallelJob\nfrom PyQt5.QtGui import QPainter, QColor, QFont\nfrom PyQt5.QtCore import QSize\nimport os\n\ndef export_layer_as_image(layer, output_folder, width, height):\n    project = QgsProject.instance()\n    map_settings = QgsMapSettings()\n    \n    # Set the extent to the extent of the layer\'s features\n    extent = layer.extent()\n    \n    # Adjust the map settings to the layer\'s extent\n    map_settings.setExtent(extent)\n    map_settings.setOutputSize(QSize(width, height))\n    map_settings.setLayers([layer])\n    map_settings.setBackgroundColor(QColor(255, 255, 255))  # Set background to white\n    \n    # Define the output image path\n    output_image_path = os.path.join(output_folder, "{}.png".format(layer.name()))\n    \n    # Render the image\n    render = QgsMapRendererParallelJob(map_settings)\n    render.start()\n    render.waitForFinished()\n    image = render.renderedImage()\n    \n    # Use QPainter to paint the layer name on the image\n    painter = QPainter()\n    painter.begin(image)\n    painter.setPen(QColor(0, 0, 0))  # Color of the text\n    painter.setFont(QFont("Arial", 30))  # Font and size of the text\n    painter.drawText(10, 40, layer.name())  # Position and text to draw\n    painter.end()\n    \n    # Save the image with the layer name\n    image.save(output_image_path, "png")\n\n# Define parameters\noutput_folder = "/Users/reuben/Desktop/output/"  # Your specified output folder\nwidth = 1080  # Adjust this for your desired output image width\nheight = 1080  # Adjust this for your desired output image height\n\n# Ensure the output directory exists\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n\n# Loop through each layer and export\nfor layer in QgsProject.instance().mapLayers().values():\n    if layer.type() == QgsMapLayer.VectorLayer:  # Check if the layer is a vector layer\n        export_layer_as_image(layer, output_folder, width, height)\n        print("Exported {}".format(layer.name()))\n')))}c.isMDXComponent=!0}}]);