"use strict";(self.webpackChunkmy_website_2=self.webpackChunkmy_website_2||[]).push([[1661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,y=c["".concat(p,".").concat(d)]||c[d]||g[d]||o;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="python and qgis layer png export",s={unversionedId:"geospatial-analysis/batch-export-png",id:"geospatial-analysis/batch-export-png",title:"python and qgis layer png export",description:"",source:"@site/docs/geospatial-analysis/batch-export-png.md",sourceDirName:"geospatial-analysis",slug:"/geospatial-analysis/batch-export-png",permalink:"/docs/geospatial-analysis/batch-export-png",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setting up PostGIS Database Server",permalink:"/docs/geospatial-analysis/setting-up-a-postgis-database-server"},next:{title:"Python for GIS",permalink:"/docs/category/python-for-gis"}},p={},l=[],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-and-qgis-layer-png-export"},"python and qgis layer png export"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from qgis.core import QgsProject, QgsMapSettings, QgsMapRendererParallelJob\nfrom PyQt5.QtGui import QPainter, QColor, QFont\nfrom PyQt5.QtCore import QSize\nimport os\n\ndef export_layer_as_image(layer, output_folder, width, height):\n    project = QgsProject.instance()\n    map_settings = QgsMapSettings()\n    \n    # Set the extent to the extent of the layer\'s features\n    extent = layer.extent()\n    \n    # Adjust the map settings to the layer\'s extent\n    map_settings.setExtent(extent)\n    map_settings.setOutputSize(QSize(width, height))\n    map_settings.setLayers([layer])\n    map_settings.setBackgroundColor(QColor(255, 255, 255))  # Set background to white\n    \n    # Define the output image path\n    output_image_path = os.path.join(output_folder, "{}.png".format(layer.name()))\n    \n    # Render the image\n    render = QgsMapRendererParallelJob(map_settings)\n    render.start()\n    render.waitForFinished()\n    image = render.renderedImage()\n    \n    # Use QPainter to paint the layer name on the image\n    painter = QPainter()\n    painter.begin(image)\n    painter.setPen(QColor(0, 0, 0))  # Color of the text\n    painter.setFont(QFont("Arial", 30))  # Font and size of the text\n    painter.drawText(10, 40, layer.name())  # Position and text to draw\n    painter.end()\n    \n    # Save the image with the layer name\n    image.save(output_image_path, "png")\n\n# Define parameters\noutput_folder = "/Users/reuben/Desktop/output/"  # Your specified output folder\nwidth = 1080  # Adjust this for your desired output image width\nheight = 1080  # Adjust this for your desired output image height\n\n# Ensure the output directory exists\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n\n# Loop through each layer and export\nfor layer in QgsProject.instance().mapLayers().values():\n    if layer.type() == QgsMapLayer.VectorLayer:  # Check if the layer is a vector layer\n        export_layer_as_image(layer, output_folder, width, height)\n        print("Exported {}".format(layer.name()))\n')))}c.isMDXComponent=!0}}]);